name: Create a new version
description:
  "This workflow creates a new version, update packages and changelogs, and push the changes.
  It does not actually publish the packages, see .github/actions/publish/action.yml."

outputs:
  version:
    description: "The new version"
    value: ${{ steps.new.outputs.version }}

runs:
  using: composite
  steps:
    - name: Are we called from `main`?
      # This should only be called from the main branch of the repo.
      # If this workflow is somehow called from another branch, crash.
      if: github.ref_name != 'main'
      shell: bash
      run: |
        echo "This workflow can only be called from the main branch."
        exit 1

    - name: Build global changelog
      shell: bash
      run: yarn alfa-changelog
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Gather changes and update packages
      shell: bash
      run: yarn changeset version
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Get new version
      # This is needed to push the correct git tag
      id: new
      shell: bash
      run: |
        echo "version=$(grep \"version\": */alfa-*/package.json | cut -d\" -f 4 | sort -u)" >> $GITHUB_OUTPUT

    - name: Run post version scripts
      shell: bash
      # yarn is deliberately low on lifecycle scripts and does not include a postversion one.
      # See https://yarnpkg.com/advanced/lifecycle-scripts
      # We therefore do it manually and rely on yarn workspaces ignoring non-existent scripts.
      # We also name our script differently to avoid problems in case npm is ever used and
      # triggers the hooks.
      run: yarn workspaces foreach --all --no-private --topological-dev run alfa-postversion

    - name: Hack around toplevel dependencies
      shell: bash
      # https://github.com/changesets/changesets/issues/1229
      # Need to unescape the sed string to interpret ${VERSION} and re-escape it again.
      run: sed -i 's/workspace:^[0-9\.]*/workspace:^'${VERSION}'/' package.json
      env:
        # Passing it as a variable rather than inline hardens against script injection.
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        VERSION: ${{ steps.new.outputs.version }}

    - name: Update lockfile
      shell: bash
      # Cross-workspaces references need to be updated.
      run: yarn install --no-immutable && yarn dedupe

    - name: Verify changes
      shell: bash
      run: yarn build && yarn test

    - name: Stage individual files
      shell: bash
      run: git add .changeset/ CHANGELOG.md package.json yarn.lock

    - name: Stage package files
      # Find in current directory.
      # If the name is "node_modules", skip it, don't look inside it;
      # or
      # If the name is "CHANGELOG.md", print it with \0 separator (shell glob expansion protection)
      # or
      # If the name is "package.json", print it with \0 separator (shell glob expansion protection)
      # Feed that list to git, through xargs to handle the \0 separator.
      shell: bash
      run: >
        find . 
        -name node_modules -prune 
        -o 
        -name "CHANGELOG.md" -print0
        -o
        -name "package.json" -print0
        | xargs -0 git add

    - name: Commit and tag changes
      shell: bash
      run: |
        git commit --message=${VERSION}
        git tag --annotate ${VERSION} --message=${VERSION}
      env:
        # Passing it as a variable rather than inline hardens against script injection.
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        VERSION: v${{ steps.new.outputs.version }}
